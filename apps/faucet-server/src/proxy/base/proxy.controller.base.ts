/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProxyService } from "../proxy.service";
import { ProxyCreateInput } from "./ProxyCreateInput";
import { Proxy } from "./Proxy";
import { ProxyFindManyArgs } from "./ProxyFindManyArgs";
import { ProxyWhereUniqueInput } from "./ProxyWhereUniqueInput";
import { ProxyUpdateInput } from "./ProxyUpdateInput";

export class ProxyControllerBase {
  constructor(protected readonly service: ProxyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Proxy })
  async createProxy(@common.Body() data: ProxyCreateInput): Promise<Proxy> {
    return await this.service.createProxy({
      data: data,
      select: {
        address: true,
        createdAt: true,
        id: true,
        password: true,
        port: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Proxy] })
  @ApiNestedQuery(ProxyFindManyArgs)
  async proxies(@common.Req() request: Request): Promise<Proxy[]> {
    const args = plainToClass(ProxyFindManyArgs, request.query);
    return this.service.proxies({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        password: true,
        port: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Proxy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async proxy(
    @common.Param() params: ProxyWhereUniqueInput
  ): Promise<Proxy | null> {
    const result = await this.service.proxy({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        password: true,
        port: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Proxy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProxy(
    @common.Param() params: ProxyWhereUniqueInput,
    @common.Body() data: ProxyUpdateInput
  ): Promise<Proxy | null> {
    try {
      return await this.service.updateProxy({
        where: params,
        data: data,
        select: {
          address: true,
          createdAt: true,
          id: true,
          password: true,
          port: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Proxy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProxy(
    @common.Param() params: ProxyWhereUniqueInput
  ): Promise<Proxy | null> {
    try {
      return await this.service.deleteProxy({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          password: true,
          port: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/add-proxy")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AddProxy(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.AddProxy(body);
  }

  @common.Get("/:id/get-proxies")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetProxies(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetProxies(body);
  }

  @common.Get("/:id/list-proxies")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ListProxies(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.ListProxies(body);
  }
}

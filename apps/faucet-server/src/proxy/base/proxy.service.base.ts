/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Proxy as PrismaProxy } from "@prisma/client";

export class ProxyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProxyCountArgs, "select">): Promise<number> {
    return this.prisma.proxy.count(args);
  }

  async proxies(args: Prisma.ProxyFindManyArgs): Promise<PrismaProxy[]> {
    return this.prisma.proxy.findMany(args);
  }
  async proxy(args: Prisma.ProxyFindUniqueArgs): Promise<PrismaProxy | null> {
    return this.prisma.proxy.findUnique(args);
  }
  async createProxy(args: Prisma.ProxyCreateArgs): Promise<PrismaProxy> {
    return this.prisma.proxy.create(args);
  }
  async updateProxy(args: Prisma.ProxyUpdateArgs): Promise<PrismaProxy> {
    return this.prisma.proxy.update(args);
  }
  async deleteProxy(args: Prisma.ProxyDeleteArgs): Promise<PrismaProxy> {
    return this.prisma.proxy.delete(args);
  }
  async AddProxy(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetProxies(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async ListProxies(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}

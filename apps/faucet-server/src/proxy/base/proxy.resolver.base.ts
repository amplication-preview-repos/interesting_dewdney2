/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Proxy } from "./Proxy";
import { ProxyCountArgs } from "./ProxyCountArgs";
import { ProxyFindManyArgs } from "./ProxyFindManyArgs";
import { ProxyFindUniqueArgs } from "./ProxyFindUniqueArgs";
import { CreateProxyArgs } from "./CreateProxyArgs";
import { UpdateProxyArgs } from "./UpdateProxyArgs";
import { DeleteProxyArgs } from "./DeleteProxyArgs";
import { ProxyService } from "../proxy.service";
@graphql.Resolver(() => Proxy)
export class ProxyResolverBase {
  constructor(protected readonly service: ProxyService) {}

  async _proxiesMeta(
    @graphql.Args() args: ProxyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Proxy])
  async proxies(@graphql.Args() args: ProxyFindManyArgs): Promise<Proxy[]> {
    return this.service.proxies(args);
  }

  @graphql.Query(() => Proxy, { nullable: true })
  async proxy(
    @graphql.Args() args: ProxyFindUniqueArgs
  ): Promise<Proxy | null> {
    const result = await this.service.proxy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Proxy)
  async createProxy(@graphql.Args() args: CreateProxyArgs): Promise<Proxy> {
    return await this.service.createProxy({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Proxy)
  async updateProxy(
    @graphql.Args() args: UpdateProxyArgs
  ): Promise<Proxy | null> {
    try {
      return await this.service.updateProxy({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Proxy)
  async deleteProxy(
    @graphql.Args() args: DeleteProxyArgs
  ): Promise<Proxy | null> {
    try {
      return await this.service.deleteProxy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async AddProxy(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.AddProxy(args);
  }

  @graphql.Query(() => String)
  async GetProxies(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetProxies(args);
  }

  @graphql.Query(() => String)
  async ListProxies(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.ListProxies(args);
  }
}
